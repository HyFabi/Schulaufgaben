package at.maurutschek.rekursionen.liederbaum.data;

/**
 * LiederBaum - Eine Klasse welches einen Liederbaum implementiert und Methoden zur verfügung stellt.
 * @author Fabian Maurutschek
 *
 */
public class LiederBaum {
	LiederBaumKnoten root;

	/**
	 * Konstruktor
	 * @param l: Der Erste Liederbaumknoten
	 */
	public LiederBaum(Lied l) {
		this.root = new LiederBaumKnoten(l);
	}

	/**
	 * Defaultkonstruktor besitzt am Anfang kein einziges Element
	 */
	public LiederBaum() {
		this.root = null;
	}

	/**
	 * Eine Methode welche ein Lied, welches nach beriter existens im Liederbaum überprüft wird
	 * @param l: Das Lied an sich
	 * @return true- falls es existiert, false - falls nicht
	 * @throws Nullpointerexception
	 */
	public boolean vorhanden(Lied l) throws Exception {
		if (l == null)
			throw new Exception();
		if (this.root == null)
			return false;
		return vorhanden(this.root, l);
	}

	/**
	 * Hilfsmethode (wahre Methode) von vorhanden(Lied l)
	 */
	private boolean vorhanden(LiederBaumKnoten lbk, Lied l) {
		if (lbk.getLied().equals(l))
			return true;
		if (lbk.getLinks() != null)
			return vorhanden(lbk.getLinks(), l);
		if (lbk.getRechts() != null)
			return vorhanden(lbk.getRechts(), l);
		return false;
	}

	/**
	 * Fügt ein Lied in den Liederbaum hinein
	 * @param l: Das zu hinzufügennde Lied
	 * @return true/false falls hinzugefügt wurde oder nicht
	 * @throws Exception: falls Lied null ist
	 */
	public boolean add(Lied l) throws Exception {
		if (l == null)
			throw new Exception();
		if (vorhanden(l))
			return false;
		if (this.root == null) {
			this.root = new LiederBaumKnoten(l);
		}
		return add(this.root, l);
	}

	/**
	 * Hilfsmethode (wahre Methode) von add(Lied l)
	 */
	private boolean add(LiederBaumKnoten lbk, Lied l) {
		if (lbk.getLied().getTitel().compareTo(l.getTitel()) > 0) {
			if (lbk.getLinks() != null)
				return add(lbk.getLinks(), l);
			lbk.setLinks(new LiederBaumKnoten(l));
			return true;
		}
		if (lbk.getLied().getTitel().compareTo(l.getTitel()) < 0) {
			if (lbk.getRechts() != null)
				return add(lbk.getRechts(), l);
			lbk.setRechts(new LiederBaumKnoten(l));
			return true;
		}
		return false;
	}

	/**
	 * Gibt jedes Lied im Baum aus
	 * @throws Exception
	 */
	public void ausgeben() throws Exception {
		if (this.root == null)
			throw new Exception();
		ausgeben(this.root);
	}

	/**
	 * Hilfsmethode (wahre Methode) von ausgeben()
	 */
	private void ausgeben(LiederBaumKnoten lbk) {
		if (lbk.getLinks() != null)
			ausgeben(lbk.getLinks());
		if (lbk.getRechts() != null)
			ausgeben(lbk.getRechts());
		System.out.println(lbk.getLied().toString());
	}

	/**
	 * Summiert jede Länge von einem Lied
	 * @return
	 * @throws Exception
	 */
	public long sumLiederLaenge() throws Exception {
		if (this.root == null)
			throw new Exception();
		return sumLiederLaenge(this.root, 0);
	}

	/**
	 * 
	 * @param lbk
	 * @param x
	 * @return
	 */
	private long sumLiederLaenge(LiederBaumKnoten lbk, long x) {
		if (lbk.getLinks() != null)
			x = sumLiederLaenge(lbk.getLinks(), x);
		if (lbk.getRechts() != null)
			x = sumLiederLaenge(lbk.getRechts(), x);
		x += lbk.getLied().getLaenge();
		return x;
	}
}
